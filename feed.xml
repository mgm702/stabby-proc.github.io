<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://stabbyproc.com/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.1">Jekyll</generator><link href="http://stabbyproc.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://stabbyproc.com/" rel="alternate" type="text/html" /><updated>2017-04-05T00:09:50-06:00</updated><id>http://stabbyproc.com//</id><title type="html">Stabby Proc</title><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><entry><title type="html">Array’s First and Last method in CRuby Source Code - Part 1</title><link href="http://stabbyproc.com/ruby/array-first-last-in-cruby-part1.html" rel="alternate" type="text/html" title="Array's First and Last method in CRuby Source Code - Part 1" /><published>2017-02-23T00:00:00-07:00</published><updated>2017-02-23T00:00:00-07:00</updated><id>http://stabbyproc.com/ruby/array-first-last-in-cruby-part1</id><content type="html" xml:base="http://stabbyproc.com/ruby/array-first-last-in-cruby-part1.html">&lt;p&gt;The first area of Ruby source code that I want to discuss is the array data structure. The reason I want to begin with array data structure is because of the similar nature in which C and Ruby arrays operate. It’s also fascinating to see how C data structures are used and transformed in order to provide helper functions in Ruby that aren’t built into the core of C programming. However, before talking about the functions in Ruby, we first have to discuss how arrays are represented in MRI.&lt;/p&gt;

&lt;p&gt;in CRuby, the &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; structure is used to represent each array you create in Ruby. Similar to other C structures in MRI, &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; holds the RBasic inner structure. This structure holds the klass pointer and other information necessary for object creation. In addition to basic object values, &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; holds important information about array allocation and management. Some of these values include the long variable &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt;, which holds the number of values saved to the array, &lt;code class=&quot;highlighter-rouge&quot;&gt;ptr&lt;/code&gt;, which is a pointer to a memory segment CRuby allocates individually in order to save array elements, and &lt;code class=&quot;highlighter-rouge&quot;&gt;shared&lt;/code&gt;, which represents data that is consolidated between multiple arrays. All of these can be seen below in the &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; structure definition which can be found in your &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby.h&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RArray&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RBasic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RARRAY_EMBED_LEN_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that you have an understanding about how the array object is created in Ruby, we can now talk about how CRuby creates the functions that make Ruby such an amazing language. I’ve decided that the first two methods I’m going to look at are simple and useful for finding elements in an array, &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-first&quot;&gt;Array#first&lt;/a&gt; and &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-last&quot;&gt;Array#last&lt;/a&gt;. Both of these functions are easy to understand in terms of their purpose and how to implement them. However, I can’t tell you how many times throughout my day I use these methods when working with array objects. They are functions that Ruby programmers take for granted so let’s take a look at how these functions are implemented under the hood.&lt;/p&gt;

&lt;p&gt;The first thing I did in order to &lt;a href=&quot;http://stabbyproc.com/ruby/tools-being-used-for-c-ruby-inspection.html&quot;&gt;inspect these functions was open up the pry REPL program&lt;/a&gt; and use the &lt;code class=&quot;highlighter-rouge&quot;&gt;show-source&lt;/code&gt; method. I was able to pull both methods from the source code and they’re both shown below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_ary_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_AREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary_take_first_or_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARY_TAKE_LAST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here’s the &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-first&quot;&gt;Array#first&lt;/a&gt; method in CRuby:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_ary_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RARRAY_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_AREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary_take_first_or_last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ARY_TAKE_FIRST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As you can see, both of these functions have a lot of similarities. They take the same values in each and they both return a &lt;a href=&quot;http://stabbyproc.com/ruby/value-pointer-in-cruby.html&quot;&gt;VALUE pointer&lt;/a&gt;, which represents the new array value returned from the function. These methods also check to make sure that the array length is greater than zero, otherwise &lt;code class=&quot;highlighter-rouge&quot;&gt;Qnil&lt;/code&gt; is returned. Finally, both functions are similar in that they call the &lt;code class=&quot;highlighter-rouge&quot;&gt;ary_take_first_or_last&lt;/code&gt; method if the array wants to return more than just one object from the list. However, before I talk about that function I want to cover how each method returns a single object from either the front or the end of the array.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-first&quot;&gt;Array#first&lt;/a&gt; the method first checks to see if the &lt;a href=&quot;http://crasseux.com/books/ctutorial/argc-and-argv.html&quot;&gt;argc&lt;/a&gt; variable is equal to 0. That means that the Ruby program doesn’t want to return anything more than the first value from the array. Afterwards, the function checks to see if the length of the array is greater than zero. If it’s not, then the function returns the nil value, &lt;code class=&quot;highlighter-rouge&quot;&gt;Qnil&lt;/code&gt;. If the array length is greater than zero though, then the function calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;RARRAY_AREF&lt;/code&gt; with the array and value that needs to be returned. In this case, that value is 0 because we want the first element in the array.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RARRAY_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_AREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The functionality is very similar when working with &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-last&quot;&gt;Array#last&lt;/a&gt;. The only difference is the value that needs to be returned from the array. I found this part of the function very interesting because I was wondering how C arrays would handle returning the last value from an array, since there’s no natural way for the data structure to do so. However, in CRuby, we leverage the &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; structure variable, &lt;code class=&quot;highlighter-rouge&quot;&gt;len&lt;/code&gt;, which holds the Ruby array’s length. Finally, we pass this along to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RARRAY_AREF&lt;/code&gt; function where the single value is returned.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qnil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RARRAY_AREF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RARRAY_AREF&lt;/code&gt; is a preprocessor function which returns an array value based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt; input variable. You can see this in the code below because of the square brackets and reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RARRAY_CONST_PTR&lt;/code&gt; function. This function returns the constant &lt;code class=&quot;highlighter-rouge&quot;&gt;VALUE&lt;/code&gt; pointer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;RArray&lt;/code&gt; structure passed into the function and using the brackets means that we are returning an array with a single value back to Ruby.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  &lt;span class=&quot;cp&quot;&gt;#ifndef RARRAY_AREF
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;# define RARRAY_AREF(a, i) (RARRAY_CONST_PTR(a)[i])
&lt;/span&gt;  &lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And that’s it. Both &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-first&quot;&gt;Array#first&lt;/a&gt; and &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/Array.html#method-i-last&quot;&gt;Array#last&lt;/a&gt; pass their functionality to this function in order to return the necessary value from the array. In the next post I will cover how both these Ruby functions return multiple values from the array, including an in depth look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;ary_take_first_or_last&lt;/code&gt; function.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="cruby" /><category term="ruby-arrays" /><category term="rarray" /><category term="mri" /><summary type="html">The first area of Ruby source code that I want to discuss is the array data structure. The reason I want to begin with array data structure is because of the similar nature in which C and Ruby arrays operate. It’s also fascinating to see how C data structures are used and transformed in order to provide helper functions in Ruby that aren’t built into the core of C programming. However, before talking about the functions in Ruby, we first have to discuss how arrays are represented in MRI.</summary></entry><entry><title type="html">What’s VALUE in CRuby?</title><link href="http://stabbyproc.com/ruby/value-pointer-in-cruby.html" rel="alternate" type="text/html" title="What's VALUE in CRuby?" /><published>2017-02-20T00:00:00-07:00</published><updated>2017-02-20T00:00:00-07:00</updated><id>http://stabbyproc.com/ruby/value-pointer-in-cruby</id><content type="html" xml:base="http://stabbyproc.com/ruby/value-pointer-in-cruby.html">&lt;p&gt;Before I talk about CRuby, I want to briefly discuss what the VALUE pointer is. Understanding what this pointer does will help when looking through &lt;a href=&quot;https://docs.ruby-lang.org/en/trunk/extension_rdoc.html&quot;&gt;CRuby source code&lt;/a&gt;. One great benefit about C is that every value and function must specifically declare the datatype that it’s working with. I find this super helpful when trying to investigate what something does in C code. By using this, it’s possible to determine the value type that the function uses, and what each parameter is before it’s used. This is different from Ruby or other dynamically typed languages, &lt;a href=&quot;http://www.rubyfleebie.com/ruby-is-dynamically-and-strongly-typed/&quot;&gt;where a function or variable data type is determined at runtime&lt;/a&gt;. While this is helpful when you’re working with objects that don’t have a specific data type, in my opinion I prefer the declared value type as it makes the code easier to read and understand.&lt;/p&gt;

&lt;p&gt;When I inspect C code, I always try to identify the data type to better understand what’s going on. The only problem with inspecting CRuby source code though, was I kept running into this VALUE data type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;another_example_func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What’s this data type and how can I use it to better understand the CRuby source code? As I thought about this dilemma, I remembered reading about VALUE in a book I finished a while back, &lt;a href=&quot;http://mgm702.com/books.html&quot;&gt;Ruby Under a Microscope&lt;/a&gt;. In this book the author, &lt;a href=&quot;http://www.rubyinside.com/&quot;&gt;Pat Shaughnessy&lt;/a&gt;, describes VALUE as a pointer to any RClass or RObject value in Ruby. In CRuby, these structures are used to hold resources and information about objects or classes such as the instance variable count, &lt;a href=&quot;http://inferior-products.com/docs/userdocs/ruby19/html/d7/da9/struct_r_object.html&quot;&gt;numiv&lt;/a&gt;, or a pointer to an array of instance variables, &lt;a href=&quot;http://inferior-products.com/docs/userdocs/ruby19/html/d7/da9/struct_r_object.html&quot;&gt;ivptr&lt;/a&gt;. RClass and RObject structures also contain an inner structure called RBasic which holds additional information about the object, most importantly the &lt;a href=&quot;http://inferior-products.com/docs/userdocs/ruby19/html/d7/da9/struct_r_object.html&quot;&gt;klass pointer&lt;/a&gt;. All of these are used by Ruby to help build object and class templates.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RBasic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;basic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numiv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ivptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iv_index_tbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* shortcut for RCLASS_IV_INDEX_TBL(rb_obj_class(obj)) */&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;heap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROBJECT_EMBED_LEN_MAX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Another interesting fact about VALUE is how it’s represented internally by CRuby. While most of the time using a pointer data type would be the best solution, instead VALUE is represented as an unsigned long. Because on most computer platforms, &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(void *)&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;sizeof(long)&lt;/code&gt;, this representation is not an issue. The main purpose of the pointer continues to be holding the memory address of the structure on the heap, however, by using the unsigned long data type, Ruby is able to leverage performance benefits. Smaller data types such as &lt;a href=&quot;http://archive.oreilly.com/pub/post/the_ruby_value_1.html&quot;&gt;nil, symbols, true, false, and small integers are saved directly to VALUE&lt;/a&gt;. Ruby remembers these classes using a series of bit flags saved in the first few bits of VALUE. This means that these classes are saved on the stack instead of the normal place where CRuby stores them, the heap.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;&quot;&gt;
  &lt;img src=&quot;http://i1368.photobucket.com/albums/ag177/Matt_Michnal/2__ruby_zps51pby4fp.png&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When working with objects in Ruby, other than the smaller class types, the VALUE pointer is used as a reference to CRuby class data structures. Because information in objects has a longer lifespan and more complicated data, the actual data structure is saved on the heap and then VALUE is used to hold its memory address. When the VALUE is no longer referenced in Ruby code, it will remove the memory address from storage, making the structure on the heap ready for garbage collection. This is illustrated below with a simple RObject structure:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;&quot;&gt;
  &lt;img src=&quot;http://i1368.photobucket.com/albums/ag177/Matt_Michnal/heapstack_zpsa0yqblmn.png&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I hope this information helps when trying to follow &lt;a href=&quot;http://stabbyproc.com/tags/#cruby&quot;&gt;my series of CRuby source code posts&lt;/a&gt;!&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="cruby" /><category term="value-pointer" /><summary type="html">Before I talk about CRuby, I want to briefly discuss what the VALUE pointer is. Understanding what this pointer does will help when looking through CRuby source code. One great benefit about C is that every value and function must specifically declare the datatype that it’s working with. I find this super helpful when trying to investigate what something does in C code. By using this, it’s possible to determine the value type that the function uses, and what each parameter is before it’s used. This is different from Ruby or other dynamically typed languages, where a function or variable data type is determined at runtime. While this is helpful when you’re working with objects that don’t have a specific data type, in my opinion I prefer the declared value type as it makes the code easier to read and understand.</summary></entry><entry><title type="html">Tools I’m Using to Inspect CRuby Source Code</title><link href="http://stabbyproc.com/ruby/tools-being-used-for-c-ruby-inspection.html" rel="alternate" type="text/html" title="Tools I'm Using to Inspect CRuby Source Code" /><published>2017-02-17T00:00:00-07:00</published><updated>2017-02-17T00:00:00-07:00</updated><id>http://stabbyproc.com/ruby/tools-being-used-for-c-ruby-inspection</id><content type="html" xml:base="http://stabbyproc.com/ruby/tools-being-used-for-c-ruby-inspection.html">&lt;p&gt;This is a short post about the tools that I’m going to use to investigate methods in the &lt;a href=&quot;http://ruby-doc.org/&quot;&gt;CRuby source code&lt;/a&gt;. Hopefully using these same techniques, if you feel like it, you can follow along as you read through this &lt;a href=&quot;http://stabbyproc.com/tags#cruby&quot;&gt;series of posts&lt;/a&gt;. With better understanding of the tools that I’m going to be using, you will be better equipped to understand the &lt;a href=&quot;http://ruby-doc.org/&quot;&gt;CRuby source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;mr-miyagi&quot;&gt;
  &lt;img src=&quot;http://i.giphy.com/s2Llqyba674pW.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The main tool that I’m going to talk about is &lt;a href=&quot;http://pryrepl.org/&quot;&gt;Pry&lt;/a&gt;. Many developers already know about this tool, especially if you work in Ruby codebases frequently. It’s often used as a &lt;a href=&quot;https://learn.co/lessons/debugging-with-pry&quot;&gt;runtime debugger&lt;/a&gt; and it’s an amazing tool for taking apart your stack trace method by method until you’ve found the source of your problems. However, the part of &lt;a href=&quot;http://pryrepl.org&quot;&gt;Pry&lt;/a&gt; that I’m going to talk about is the less recognized part of the gem which is the &lt;a href=&quot;https://github.com/pry/pry/wiki/Source-browsing&quot;&gt;show-source&lt;/a&gt; method found inside the &lt;a href=&quot;https://www.sitepoint.com/rubyists-time-pry-irb/&quot;&gt;Pry REPL console&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pry not only can be used as a &lt;a href=&quot;https://learn.co/lessons/debugging-with-pry&quot;&gt;powerful Ruby debugging tool&lt;/a&gt;, it can also be used to bring up CRuby source code methods that power the language methods being used. This feature is one of my favorite parts about Pry; however, when I talk to other developers about this functionality, they often times have had very little experience actually using the tool.&lt;/p&gt;

&lt;div class=&quot;big-emoji&quot;&gt;
:fearful:
&lt;/div&gt;

&lt;p&gt;In order to use Pry’s &lt;a href=&quot;https://github.com/pry/pry/wiki/Source-browsing&quot;&gt;show-source&lt;/a&gt; method, the heart of our inspection process, we need to use the Pry REPL instance. In order to get this set up we first must install the pry gem to our system:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install pry&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now that pry is installed it’s possible to open the Pry REPL console by simply typing &lt;code class=&quot;highlighter-rouge&quot;&gt;pry&lt;/code&gt; into your terminal. The instance that opens is similar to the traditional IRB REPL console that comes with Ruby; however this instance provides Pry specific functions that help with the inspection of CRuby code, particularly the &lt;a href=&quot;https://github.com/pry/pry/wiki/Source-browsing&quot;&gt;show-source&lt;/a&gt; function. The basics of using the &lt;a href=&quot;https://github.com/pry/pry/wiki/Source-browsing&quot;&gt;show-source&lt;/a&gt; function are pretty simple, just enter &lt;code class=&quot;highlighter-rouge&quot;&gt;show-source&lt;/code&gt; followed by the Class and the method that you’re looking to find. An example of this is shown below looking for the &lt;a href=&quot;https://ruby-doc.org/core-2.4.0/String.html#method-i-scan&quot;&gt;String#scan&lt;/a&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scan&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Owner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Visibility&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;public&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rb_str_scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSTRING_PTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RSTRING_LEN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_pat_quoted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mustnot_broken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rb_block_given_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_ary_new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NIL_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rb_ary_push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_pat_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NIL_P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scan_once&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rb_yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;str_mod_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rb_pat_search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This example provides us with a basic idea of how the C source code method is setup in Ruby; however in order to fully understand this method and all of the data structures and methods that go with it, we need to open up CRuby files and inspect them for ourselves. In addition to opening these files, we need a way to index those methods and data structures so that we can easily jump back and forth between method and structure defintions to better understand the underlying CRuby source code. To accomplish this, I’ll be using &lt;a href=&quot;https://github.com/postmodern/ruby-install&quot;&gt;ruby-install&lt;/a&gt;, &lt;a href=&quot;https://github.com/postmodern/chruby&quot;&gt;chruby&lt;/a&gt;, and &lt;a href=&quot;http://ctags.sourceforge.net/&quot;&gt;ctags&lt;/a&gt; to load, organize, and index my Ruby source code for inspection. Hopefully this post was able to give you an idea of how I plan on looking through the CRuby source code. If you feel inclined you can now join along as I start my journey with my favorite data structure in programming, the Array.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="cruby" /><category term="ruby-tools" /><summary type="html">This is a short post about the tools that I’m going to use to investigate methods in the CRuby source code. Hopefully using these same techniques, if you feel like it, you can follow along as you read through this series of posts. With better understanding of the tools that I’m going to be using, you will be better equipped to understand the CRuby source code.</summary></entry><entry><title type="html">Deep Dive Into CRuby Source Code - A Fun Experiment in Learning</title><link href="http://stabbyproc.com/ruby/intro-learning-c-through-ruby.html" rel="alternate" type="text/html" title="Deep Dive Into CRuby Source Code - A Fun Experiment in Learning" /><published>2017-02-15T00:00:00-07:00</published><updated>2017-02-15T00:00:00-07:00</updated><id>http://stabbyproc.com/ruby/intro-learning-c-through-ruby</id><content type="html" xml:base="http://stabbyproc.com/ruby/intro-learning-c-through-ruby.html">&lt;p&gt;I’ve been working with a lot of C code lately and it’s amazing!&lt;/p&gt;

&lt;div class=&quot;big-emoji&quot;&gt;
 :scream:
&lt;/div&gt;

&lt;p&gt;I started with the modest goal of learning to read the &lt;a href=&quot;http://ruby-doc.org/core-2.4.0/GC.html&quot;&gt;garbage collector code in CRuby&lt;/a&gt; and it spiraled out of control from there. So many projects are built on top of C. It’s one of those programming languages that’s hard to avoid, especially if you’re working on system level software such as &lt;a href=&quot;https://redis.io/&quot;&gt;Redis&lt;/a&gt;, or my favorite tool of all &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;. Since that’s the kind of code I like to create, I felt what better time to start learning how to program in C.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;cat-dog&quot;&gt;
  &lt;img src=&quot;http://i.giphy.com/RGCRb4qZ1zA6A.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So a little background on me before I begin. During my last year and a half of college, I took &lt;a href=&quot;http://www.cplusplus.com/&quot;&gt;C++&lt;/a&gt; programming courses. They were some of the toughest classes that I’d ever taken, but I learned a lot of the practices of coding that I still try to follow today. Having this knowledge in &lt;a href=&quot;http://www.cplusplus.com/&quot;&gt;C++&lt;/a&gt; definitely helped me learn how to program in C, since the only noticeable difference between the two is the function-driven vs. object-driven nature of each language. Now I know that all of the language purists will probably read this and complain because there are other differences between the two languages, but I’m just pointing out the most noticeable difference between the two. Since I mostly work in Ruby, I felt comfortable working in Object Oriented code architecture, so I was excited to try something new, and with C code I was that much closer to actually communicating with the machine.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;beavis-computer&quot;&gt;
  &lt;img src=&quot;http://i.giphy.com/MF1kR4YmC2Z20.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;I dove head first into &lt;a href=&quot;http://mgm702.com/books&quot;&gt;reading books about C programming&lt;/a&gt; to learn the best practices of the language. All of this was fascinating and I learned so much about how C has influenced so many programming languages, and how it still remains a powerful language for creating software after all of these years. The biggest pain points in learning C was wrapping my head around pointers again and using them more than ever to move and shape data in my code. A good resource that I found that helped me with many of the subtleties of using pointers was &lt;a href=&quot;http://amzn.to/2mReVzT&quot;&gt;Understanding and Using C Pointers&lt;/a&gt;. This book was incredibly helpful with learning &lt;a href=&quot;https://www.quora.com/What-are-the-different-types-of-C-pointers&quot;&gt;double and dangling pointers&lt;/a&gt;, both of which I had struggled with before finding this resource. After finishing &lt;a href=&quot;http://amzn.to/2mReVzT&quot;&gt;Understanding and Using C Pointers&lt;/a&gt; it was time to try to solidify the knowledge that I had recently acquired, but how could I do that?&lt;/p&gt;

&lt;p&gt;I decided to turn to the original reason that I started learning C code in the first place, to understand the &lt;a href=&quot;http://ruby-doc.org/core-2.4.0/GC.html&quot;&gt;MRI garbage collector source code&lt;/a&gt;. This time however, I have bigger ambitions than just understanding &lt;a href=&quot;http://ruby-doc.org/core-2.4.0/GC.html&quot;&gt;Ruby’s GC code&lt;/a&gt;. I now can use my better understanding of C code to help me better grasp the underlying concepts that make up the Ruby programming language. Therefore, in this series of posts, I will describe different methods in Ruby and how they work underneath the surface using C code. Some of it will be simple concepts used to illustrate C’s influence on the Ruby language and some of them will be more complex in order to try and understand the lower level methods that help make Ruby the amazing programming language it is today.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="cruby" /><category term="c-resources" /><summary type="html">I’ve been working with a lot of C code lately and it’s amazing!</summary></entry><entry><title type="html">Creating a Personal Git Server From Your Old Computer</title><link href="http://stabbyproc.com/ubuntu/personal-server-setup.html" rel="alternate" type="text/html" title="Creating a Personal Git Server From Your Old Computer" /><published>2017-02-02T00:00:00-07:00</published><updated>2017-02-02T00:00:00-07:00</updated><id>http://stabbyproc.com/ubuntu/personal-server-setup</id><content type="html" xml:base="http://stabbyproc.com/ubuntu/personal-server-setup.html">&lt;p&gt;Recently, I’ve been looking for a new solution to hold my private git repositories. I know some people will say to use &lt;a href=&quot;https://bitbucket.org/&quot;&gt;Bitbucket&lt;/a&gt; or &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;Gitlab&lt;/a&gt;, because they have free private repos and they’re amazing! And sure it’s true that they have great services that provide git management for you to use as you please, but the problem is that I wanted something that I could not only manage at the system level, but I  also wanted a solution that was independent and customizable. I debated the idea of using &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;Digital Ocean&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; or &lt;a href=&quot;https://www.heroku.com/&quot;&gt;Heroku&lt;/a&gt; to host my personal solution, but the money it would take to create a complete management tool made me think about how I could solve this problem while keeping my costs down. In addition to the price factor, a major point of emphasis for me was to have full control over the server and all of its components. Finally, my last goal with this server was to use &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; to create and manage my technology stack, so I wanted to create something on my own. Around this time I was cleaning out part of my house, and what do I happen to find but my old &lt;a href=&quot;https://www.amazon.com/Dell-15-6-Inch-Processor-Discontinued-Manufacturer/dp/B002PY7OSA&quot;&gt;Dell&lt;/a&gt; computer. This computer is nothing special but it does have the following specs:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;nl&quot;&gt;Architecture:&lt;/span&gt;          &lt;span class=&quot;n&quot;&gt;x86_64&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;n&quot;&gt;Intel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Core&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Duo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CPU&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;T6600&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GHz&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HDD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;320&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;RAM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                   &lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MB&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;                  &lt;span class=&quot;n&quot;&gt;DDR2&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Definitely not anything I would brag about or use for my primary development machine, but it still has value to me, and I didn’t want to get rid of it just yet. So I thought to myself, why not try an older approach and configure my own home server that can run on &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; and use the &lt;a href=&quot;https://about.gitlab.com/&quot;&gt;Gitlab CE&lt;/a&gt; open source tool to manage my git repos? I could also create other small utility sites that would turn this once dust collecting relic into a fully functional system that my family and I could use for our storage needs. I began thinking about what exactly I wanted on this home server of mine.&lt;/p&gt;

&lt;p&gt;I wanted to use a Linux server setup that was stable and could get up and running relatively quickly. I decided to use an Ubuntu Server version 16.04 image. I wanted to use the latest version of the distro, and I wanted to make sure that &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; was the main focus of tool management on the server. However, I also wanted the availability and familiarity of an Ubuntu server, since it’s the distro I’m most comfortable with. I could’ve went with &lt;a href=&quot;https://www.debian.org/&quot;&gt;Debian&lt;/a&gt; as well, but for now I decided on &lt;a href=&quot;https://www.ubuntu.com/&quot;&gt;Ubuntu&lt;/a&gt;. In the future, as I get better with &lt;a href=&quot;https://www.docker.com&quot;&gt;Docker&lt;/a&gt; I will probably move to &lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt; since it’s size is &lt;a href=&quot;https://thenewstack.io/digital-ocean-now-supports-coreos-the-lightweight-linux-distro-for-hosting-docker-containers/&quot;&gt;1/4&lt;/a&gt; that of a normal Linux distro. Also, &lt;a href=&quot;https://www.coreos.com&quot;&gt;CoreOS&lt;/a&gt; provides tools that assist in managing multiple server container systems at once. This might be useful if my girlfriend ever decides to give up her old Macbook for the good of our server farm :joy:.&lt;/p&gt;

&lt;p&gt;The technology stack that I want to use on this server varies since I plan to use the server as a small project test space, in addition to it’s use as a git repository management tool and media client server. However, the main technology I’ll be focusing on is the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://rubyonrails.org/&quot;&gt;Ruby/Rails&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://puma.io/&quot;&gt;Puma Server&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra (small API apps)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.postgresql.org/&quot;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After sorting out all of the configurations that I wanted setup in my head, I was finally ready to start developing this server. With any good project though, I needed to first test everything to make sure it was going to work the way I expected it to. This is when I decided to turn to one of my favorite development tools, &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt;. I’ll talk more about that though in the next post, but that’s all for right now.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="docker" /><category term="virtual-machine" /><category term="core-os" /><summary type="html">Recently, I’ve been looking for a new solution to hold my private git repositories. I know some people will say to use Bitbucket or Gitlab, because they have free private repos and they’re amazing! And sure it’s true that they have great services that provide git management for you to use as you please, but the problem is that I wanted something that I could not only manage at the system level, but I  also wanted a solution that was independent and customizable. I debated the idea of using Digital Ocean, AWS or Heroku to host my personal solution, but the money it would take to create a complete management tool made me think about how I could solve this problem while keeping my costs down. In addition to the price factor, a major point of emphasis for me was to have full control over the server and all of its components. Finally, my last goal with this server was to use Docker to create and manage my technology stack, so I wanted to create something on my own. Around this time I was cleaning out part of my house, and what do I happen to find but my old Dell computer. This computer is nothing special but it does have the following specs:</summary></entry><entry><title type="html">Organizing Your Vimrc Into Multiple Files</title><link href="http://stabbyproc.com/vim/organize-vimrc-setup.html" rel="alternate" type="text/html" title="Organizing Your Vimrc Into Multiple Files" /><published>2016-12-02T00:00:00-07:00</published><updated>2016-12-02T00:00:00-07:00</updated><id>http://stabbyproc.com/vim/organize-vimrc-setup</id><content type="html" xml:base="http://stabbyproc.com/vim/organize-vimrc-setup.html">&lt;p&gt;This post is about splitting up your vimrc file into smaller more manageable systems. &lt;a href=&quot;https://github.com/mgm702/dotfiles/tree/master/vim&quot;&gt;My vimrc&lt;/a&gt; is easier to organize using this layout, and it allows me to add or remove settings and plugins at will. This is useful when you’re constantly updating and changing your vimrc settings. Sometimes I’ll look through &lt;a href=&quot;https://dougblack.io/words/a-good-vimrc.html&quot;&gt;popular vimrc files&lt;/a&gt; for new and interesting methods or settings to incorporate into my setup that allow me to make quick additions or subtractions.&lt;/p&gt;

&lt;p&gt;The first part of setting up a more dynamic vim setup is expanding and sourcing in files into your primary vimrc file. This allows you to break up a large vimrc file into smaller parts that you then control whether they’re sourced into your setup or not. Also, breaking up the file into more modular components allows you to understand parts of the vim setup more easily and quickly. No longer do you have to wonder if the settings you added to your vimrc are meant for a plugin or not, just &lt;a href=&quot;https://github.com/mgm702/dotfiles/tree/master/vim/settings&quot;&gt;create a new specific plugin file for those settings&lt;/a&gt; and source it in. This gives amazing flexibility to the vim configuration system; however, sourcing in vim files can also be dangerous if not well-contained. You don’t want to source a file into your vimrc if it doesn’t exist or is in the incorrect location on your system.&lt;/p&gt;

&lt;p&gt;The important component in making this possible is the &lt;code class=&quot;highlighter-rouge&quot;&gt;filereadable&lt;/code&gt; method, which, with the help of the expand method, test a certain path to see if the file actually exists in that location. If it does, then the next step is to &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; in the file so it can be used by &lt;a href=&quot;https://github.com/mgm702/dotfiles/tree/master/vim&quot;&gt;my vimrc&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; filereadable&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/.vim/plugins.vim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  source &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;plugins&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; filereadable&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;expand&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/.vim/settings.vim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  source &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;settings&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;vim&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The benefit of this is that if the file isn’t found on the system, then the vimrc file doesn’t try to source in a file which doesn’t exist where it should be on your computer. This is helpful because if your vimrc tried to source in the file without this safeguard, it would throw an error and everything would blow up!&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;&quot;&gt;
  &lt;img src=&quot;https://media.giphy.com/media/xuDHhHcCR0rew/giphy.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;The first thing that I like to organize in &lt;a href=&quot;https://github.com/mgm702/dotfiles/tree/master/vim/plugins&quot;&gt;my vim setup is my plugins&lt;/a&gt;. I work with a variety of languages and I like my plugins to be organized based on my needs during development. The plugin manager I use to install and setup the necessary plugins is &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;. This is an amazing tool and you should seriously check it out if you want to &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;leverage on-demand loading&lt;/a&gt; for your vim plugins. This helped me greatly reduce my startup time, and it still allows me to work with all my favorite tools in whatever language I choose.&lt;/p&gt;

&lt;p&gt;That’s why in the first couple of lines in my &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins.vim&lt;/code&gt; file I focus on loading and configuring &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; to help manage my plugins. After that is installed and set up, I change the runtime path, or &lt;code class=&quot;highlighter-rouge&quot;&gt;rtp&lt;/code&gt;, so that vim is able to find all of the plugins pages located in the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins&lt;/code&gt; directory that I organize based on need and language. This configuration allows me to add and remove plugins quickly based on necessity at the moment. An example of this can be found below where I have commented out the &lt;code class=&quot;highlighter-rouge&quot;&gt;status_line.plugins&lt;/code&gt; file because I’m &lt;a href=&quot;https://github.com/mgm702/dotfiles/blob/master/vim/settings/status_line.vim&quot;&gt;currently using a simple status line instead&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&quot; Load vim-plug&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; empty&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;glob&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/.vim/autoload/plug.vim&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  execute &lt;span class=&quot;s1&quot;&gt;'!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#begin&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'~/.vim/bundle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; rtp&lt;span class=&quot;p&quot;&gt;+=~&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/.vim/&lt;/span&gt;plugins/

runtime &lt;span class=&quot;k&quot;&gt;ruby&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime autocomplete&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime git&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime php&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime project&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime html&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime js&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime css&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime &lt;span class=&quot;k&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
runtime &lt;span class=&quot;k&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;plugins
&lt;span class=&quot;c&quot;&gt;&quot; runtime status_line.plugins&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; plug#&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After the plugins are in place, the next thing that I focus on is loading in the vim settings files. I do this by creating a &lt;a href=&quot;https://github.com/mgm702/dotfiles/tree/master/vim/settings&quot;&gt;settings directory&lt;/a&gt; which will hold the smaller, more manageable files such as search, folding, and indentation settings. Then I use a &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt; loop with the &lt;code class=&quot;highlighter-rouge&quot;&gt;globpath&lt;/code&gt; method, which expands the directory and returns an array of files inside that directory, to find each file in the settings directory. Finally a call to source the file is executed and each of the settings are loaded into my vim configuration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; vimsettings &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'~/.vim/settings'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; uname &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; system&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uname -s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; fpath &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; split&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;globpath&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;vimsettings&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\*.vim'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  exe &lt;span class=&quot;s1&quot;&gt;'source'&lt;/span&gt; fpath
&lt;span class=&quot;k&quot;&gt;endfor&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And finally you’re ready to go. Now you have a vim setup that is flexible and can adjust based on the language you’re using for development. I hope this setup works for you because it has been a huge benefit for me for a long time. Being able to change and adapt is one of the reasons I love using Vim, and creating my setup like this reflects that. In the next post I will talk more about vim-plug and how I used that among other techniques to solve my vim loading speed problem.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="vimrc" /><category term="vim-settings" /><category term="vim-plug" /><summary type="html">This post is about splitting up your vimrc file into smaller more manageable systems. My vimrc is easier to organize using this layout, and it allows me to add or remove settings and plugins at will. This is useful when you’re constantly updating and changing your vimrc settings. Sometimes I’ll look through popular vimrc files for new and interesting methods or settings to incorporate into my setup that allow me to make quick additions or subtractions.</summary></entry><entry><title type="html">A Look at my Vimrc Setup</title><link href="http://stabbyproc.com/vim/my-vimrc-setup.html" rel="alternate" type="text/html" title="A Look at my Vimrc Setup" /><published>2016-11-23T00:00:00-07:00</published><updated>2016-11-23T00:00:00-07:00</updated><id>http://stabbyproc.com/vim/my-vimrc-setup</id><content type="html" xml:base="http://stabbyproc.com/vim/my-vimrc-setup.html">&lt;p&gt;My favorite software project/tool that I’ve used in my time working with computers is without a doubt &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;. This small, but powerful text editor is not only simple in its design and purpose, but it’s also a testament to how a well developed and designed tool will stand the test of time. As I’m writing this post, Vim is now celebrating &lt;a href=&quot;https://opensource.com/life/16/11/happy-birthday-vim-25&quot;&gt;25 years&lt;/a&gt; of being a successful open source project, and it can be found on almost every unix computer around the world. &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; allows you to use commands to quickly edit and create text/code with little effort and movement from the keyboard. It’s a developer’s dream tool, and once you’ve conquered the &lt;a href=&quot;https://robots.thoughtbot.com/the-vim-learning-curve-is-a-myth&quot;&gt;initial hurdle it takes to get comfortable with the editor&lt;/a&gt;, you will quickly discover that there’s no going back to the text editor you used before you tried &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;&quot;&gt;
  &lt;img src=&quot;https://media.giphy.com/media/26gYL5WTYK4OX1QIw/giphy.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;This powerful tool has helped me develop exceptional software for the past couple of years and I wanted to take a moment to talk about the most important part of Vim and that’s &lt;a href=&quot;http://learnvimscriptthehardway.stevelosh.com/chapters/00.html&quot;&gt;the vimrc file&lt;/a&gt;. For many users of the text editor, this file is symbolic of their own custom configurations being included in Vim. With this file you can specifically set up how you want Vim to behave and function while using the tool. It’s a powerful file that &lt;a href=&quot;http://stevelosh.com/blog/2010/09/coming-home-to-vim/&quot;&gt;many people have written blog posts about&lt;/a&gt; and it’s frequently discussed by many &lt;a href=&quot;http://www.vim.org/&quot;&gt;Vim&lt;/a&gt; users. That’s why in this series of posts I’m going to highlight some of the more interesting parts of &lt;a href=&quot;https://github.com/mgm702/dotfiles/blob/master/vim/vimrc&quot;&gt;my vimrc file&lt;/a&gt;. And although there are many &lt;a href=&quot;http://stevelosh.com/blog/2010/09/coming-home-to-vim/&quot;&gt;other vimrc configurations out there&lt;/a&gt;, these are the ones that seem to work for me. So feel free to use any of the settings at your leisure or peril.&lt;/p&gt;

&lt;div class=&quot;github-card&quot;&gt;
  &lt;a href=&quot;https://github.com/mgm702/dotfiles&quot;&gt;
    &lt;i class=&quot;devicon-github-plain-wordmark colored devicon&quot;&gt;&lt;/i&gt;
    &lt;span class=&quot;github-card-text&quot;&gt;Mgm702 - Dotfiles&lt;/span&gt;&lt;i class=&quot;fa fa-github-square&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;The two main parts of &lt;a href=&quot;https://github.com/mgm702/dotfiles/blob/master/vim/vimrc&quot;&gt;my vimrc file&lt;/a&gt; that I’m going to focus on is splitting settings up into smaller more manageable files and how to solve vim loading speed problems using vim-plug and other techniques. By following these techniques, I’ve been able to create a flexible and dependable configuration. I’m constantly tweaking and correcting my vimrc file for better efficiency and speed because I use this tool very often in my developer workflow. Hopefully these posts will give someone who is looking to use vim as a text editor a useful resource for better managing their vimrc file.&lt;/p&gt;

&lt;p&gt;So let’s get started with how to &lt;a href=&quot;http://stabbyproc.com/tags/#vimrc&quot;&gt;split the vimrc into more manageable parts&lt;/a&gt;!&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="vimrc" /><summary type="html">My favorite software project/tool that I’ve used in my time working with computers is without a doubt Vim. This small, but powerful text editor is not only simple in its design and purpose, but it’s also a testament to how a well developed and designed tool will stand the test of time. As I’m writing this post, Vim is now celebrating 25 years of being a successful open source project, and it can be found on almost every unix computer around the world. Vim allows you to use commands to quickly edit and create text/code with little effort and movement from the keyboard. It’s a developer’s dream tool, and once you’ve conquered the initial hurdle it takes to get comfortable with the editor, you will quickly discover that there’s no going back to the text editor you used before you tried Vim.</summary></entry><entry><title type="html">How To Fix Permissions Issue In Vagrant</title><link href="http://stabbyproc.com/vagrant/how-to-fix-permissions-issue-in-vagrant.html" rel="alternate" type="text/html" title="How To Fix Permissions Issue In Vagrant" /><published>2016-07-25T00:00:00-06:00</published><updated>2016-07-25T00:00:00-06:00</updated><id>http://stabbyproc.com/vagrant/how-to-fix-permissions-issue-in-vagrant</id><content type="html" xml:base="http://stabbyproc.com/vagrant/how-to-fix-permissions-issue-in-vagrant.html">&lt;p&gt;While working for &lt;a href=&quot;http://www.aimmedia.com/&quot;&gt;Active Interest Media&lt;/a&gt;, I created a &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant Box&lt;/a&gt; in order to help with on-boarding new developers. The goal was to create a specialized environment that, not only closely mimicked the company’s production environment on &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;Amazon Web Services&lt;/a&gt;, but also created a way for developers on different OS systems to quickly contribute to the codebase. Because many of the company’s developers worked on Windows and Unix machines, this was a major problem that I was looking to solve.&lt;/p&gt;

&lt;p&gt;Most of the process was pretty straightforward and I was able to create a &lt;a href=&quot;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&quot;&gt;LAMP stack box&lt;/a&gt; with a mixture of &lt;a href=&quot;https://www.chef.io/chef/&quot;&gt;Chef&lt;/a&gt; and bash commands. Everything was set up and working on different OS environments successfully, but when I tried a simple write process to one of our site’s files on the box, it froze.&lt;/p&gt;

&lt;div class=&quot;big-emoji&quot;&gt;
:flushed:
&lt;/div&gt;

&lt;p&gt;Why won’t it write to the system, what’s wrong with my perfect Vagrant box? After a little bit of poking around inside the virtual machine, I was able to conclude that the &lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt; web root directory, which holds the servable websites on the system, needed to be owned by the &lt;a href=&quot;http://fideloper.com/user-group-permissions-chmod-apache&quot;&gt;www-data group&lt;/a&gt;. I made the changes to the directory on the virtual machine and thought that I had fixed the issue; however, once again, I went to write to the file on the server, and again I was denied.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;jurassic-park&quot;&gt;
&lt;img src=&quot;http://i.imgur.com/pwg9kid.gif&quot; /&gt;
&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Why won’t this work, it can’t be the same issue again can it? Sure enough the box had reverted the read/write access to the vagrant user and I was back to square one.&lt;/p&gt;

&lt;p&gt;So I dove back into researching this problem, and I found that read/write permissions for the directory could be controlled inside the Vagrantfile. I made the following changes to the file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./sites&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/var/www&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;www-data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mount_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'dmode=775'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fmode=664'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After these changes, the server was finally running the way I wanted it to. To me this was a lesson in perseverance and testing the changes you assume fix the issue. Hopefully this lesson will save someone else time and effort down the road!&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="aws" /><category term="vagrantfile" /><category term="apache" /><summary type="html">While working for Active Interest Media, I created a Vagrant Box in order to help with on-boarding new developers. The goal was to create a specialized environment that, not only closely mimicked the company’s production environment on Amazon Web Services, but also created a way for developers on different OS systems to quickly contribute to the codebase. Because many of the company’s developers worked on Windows and Unix machines, this was a major problem that I was looking to solve.</summary></entry><entry><title type="html">Not Quite My Tempo - Testing OmniAuth with RSpec</title><link href="http://stabbyproc.com/ruby/test-omniauth-with-rspec.html" rel="alternate" type="text/html" title="Not Quite My Tempo - Testing OmniAuth with RSpec" /><published>2016-06-21T00:00:00-06:00</published><updated>2016-06-21T00:00:00-06:00</updated><id>http://stabbyproc.com/ruby/test-omniauth-with-rspec</id><content type="html" xml:base="http://stabbyproc.com/ruby/test-omniauth-with-rspec.html">&lt;p&gt;I recently worked on a project that incorporated OmniAuth functionality, and I wanted to ensure that everything was testing properly.&lt;/p&gt;

&lt;p&gt;I was using the RSpec and Capybara testing frameworks to test features and user behavior. I normally prefer MiniTest when choosing a testing framework, but hey if it’s not broke why fix it. Anyways, I was put in charge of both the OmniAuth functionality and the testing to make sure that they worked correctly. This is not an easy task because you’re basically simulating a successful sign into a third party platform, plus you have to return info back to your application.&lt;/p&gt;

&lt;p&gt;So I began my search online to see if I could find a solution to this problem, however; I found it difficult to find exactly what I was looking for.
&lt;span class=&quot;not-tempo&quot;&gt;
&lt;img src=&quot;https://i.imgur.com/35r8qKs.gif&quot; /&gt;
&lt;/span&gt;
Many solutions had close to what I was looking for, but often times they would be included just once in the test. Also, many examples were only RSpec specific, and that was a problem for me because I wanted a way to easily use OmniAuth anywhere inside the test suite with either RSpec or MiniTest. That is when I came to the conclusion that I could put a support module inside the test suite.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;OmniAuthMock&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DSL&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Capybara&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;default_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http://127.0.0.1:3000'&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OmniAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;test_mode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;OmniAuth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mock_auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:github&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;provider: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'github'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;uid: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1234567'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;credentials: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;token: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'3kynje'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;info: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;nickname: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jtest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Joe Test'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email@email.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;ss&quot;&gt;image: &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'jtest.jpg'&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'auth/github'&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This class method then can be used before tests or directly in them if need be. The reason this solution works for me is because it’s very DRY and I don’t have to write out the mock Omniauth object multiple times in the program. That make me :smile:&lt;/p&gt;

&lt;p&gt;Here is an example of the class method being used in a RSpec feature test before statement:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;OmniAuthMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And here is an example of the class method being directly used in a MiniTest test directly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_authentication&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OmniAuthMock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current_user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Joe Test&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I hope this helps anyone who’s out there looking for a nice DRY solution to OmniAuth testing.&lt;/p&gt;</content><author><name>Matt Michnal</name><email>mattm3646@gmail.com</email></author><category term="rspec" /><category term="minitest" /><category term="omniauth" /><summary type="html">I recently worked on a project that incorporated OmniAuth functionality, and I wanted to ensure that everything was testing properly.</summary></entry></feed>
